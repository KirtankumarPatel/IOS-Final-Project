////  Result.swiftimport Foundationpublic enum Result<Value> {    case success(Value)    case failure(Error)    /// Returns `true` if the result is a success, `false` otherwise.    public var isSuccess: Bool {        switch self {        case .success:            return true        case .failure:            return false        }    }    /// Returns `true` if the result is a failure, `false` otherwise.    public var isFailure: Bool {        return !isSuccess    }    /// Returns the associated value if the result is a success, `nil` otherwise.    public var value: Value? {        switch self {        case .success(let value):            return value        case .failure:            return nil        }    }    /// Returns the associated error value if the result is a failure, `nil` otherwise.    public var error: Error? {        switch self {        case .success:            return nil        case .failure(let error):            return error        }    }}// MARK: - CustomStringConvertibleextension Result: CustomStringConvertible {    public var description: String {        switch self {        case .success:            return "SUCCESS"        case .failure:            return "FAILURE"        }    }}// MARK: - CustomDebugStringConvertibleextension Result: CustomDebugStringConvertible {    public var debugDescription: String {        switch self {        case .success(let value):            return "SUCCESS: \(value)"        case .failure(let error):            return "FAILURE: \(error)"        }    }}// MARK: - Functional APIsextension Result {    public init(value: () throws -> Value) {        do {            self = try .success(value())        } catch {            self = .failure(error)        }    }    public func unwrap() throws -> Value {        switch self {        case .success(let value):            return value        case .failure(let error):            throw error        }    }    public func map<T>(_ transform: (Value) -> T) -> Result<T> {        switch self {        case .success(let value):            return .success(transform(value))        case .failure(let error):            return .failure(error)        }    }    public func flatMap<T>(_ transform: (Value) throws -> T) -> Result<T> {        switch self {        case .success(let value):            do {                return try .success(transform(value))            } catch {                return .failure(error)            }        case .failure(let error):            return .failure(error)        }    }    public func mapError<T: Error>(_ transform: (Error) -> T) -> Result {        switch self {        case .failure(let error):            return .failure(transform(error))        case .success:            return self        }    }    public func flatMapError<T: Error>(_ transform: (Error) throws -> T) -> Result {        switch self {        case .failure(let error):            do {                return try .failure(transform(error))            } catch {                return .failure(error)            }        case .success:            return self        }    }    @discardableResult    public func withValue(_ closure: (Value) -> Void) -> Result {        if case let .success(value) = self { closure(value) }        return self    }        @discardableResult    public func withError(_ closure: (Error) -> Void) -> Result {        if case let .failure(error) = self { closure(error) }        return self    }    @discardableResult    public func ifSuccess(_ closure: () -> Void) -> Result {        if isSuccess { closure() }        return self    }    @discardableResult    public func ifFailure(_ closure: () -> Void) -> Result {        if isFailure { closure() }        return self    }}